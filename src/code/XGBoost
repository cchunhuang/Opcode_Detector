import os
import numpy as np
import joblib as jb
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from Extraction import Extraction
from Vectorize import vectorize

class XGBoostDetector:
    def __init__(self, n_estimators=100, max_depth=6, eta=0.3, test_size=0.3, random_state=42, eval_metric='logloss'):
        self.n_estimators = n_estimators
        self.max_depth = max_depth
        self.eta = eta
        self.test_size = test_size
        self.random_state = random_state
        self.eval_metric = eval_metric
        self.model = xgb.XGBClassifier(n_estimators=self.n_estimators, max_depth=self.max_depth, eta=self.eta, 
                                       eval_metric=self.eval_metric, use_label_encoder=False)
    
    def load_data(self, malware_dir, benign_dir):
        """Load and preprocess PE files, extracting OpCode sequences."""
        data, labels = [], []
        
        for filename in os.listdir(malware_dir):
            file_path = os.path.join(malware_dir, filename)
            opcode_sequence = Extraction(file_path)
            if opcode_sequence:
                vectorized_sequence = vectorize(opcode_sequence)
                data.append(vectorized_sequence)
                labels.append(1)
        
        for filename in os.listdir(benign_dir):
            file_path = os.path.join(benign_dir, filename)
            opcode_sequence = Extraction(file_path)
            if opcode_sequence:
                vectorized_sequence = vectorize(opcode_sequence)
                data.append(vectorized_sequence)
                labels.append(0)
        
        return np.vstack(data), np.array(labels)
    
    def train(self, data, labels):
        """Train an XGBoost classifier for malware detection."""
        X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=self.test_size, random_state=self.random_state)
        
        self.model.fit(X_train, y_train)
        
        y_pred = self.model.predict(X_test)
        
        print("Accuracy:", accuracy_score(y_test, y_pred))
        print("Precision:", precision_score(y_test, y_pred))
        print("Recall:", recall_score(y_test, y_pred))
        print("F1 Score:", f1_score(y_test, y_pred))
    
    def save_model(self, file_path):
        """Save the trained model to a file."""
        jb.dump(self.model, file_path)
        print(f"Model saved to {file_path}")
    
    def load_model(self, file_path):
        """Load a trained model from a file."""
        self.model = jb.load(file_path)
        print(f"Model loaded from {file_path}")
    
if __name__ == "__main__":
    malware_dir = "path/to/malware/samples"
    benign_dir = "path/to/benign/samples"
    
    detector = XGBoostDetector(n_estimators=200, max_depth=8, eta=0.2, test_size=0.2, random_state=123)
    print("Loading data...")
    data, labels = detector.load_data(malware_dir, benign_dir)
    
    print("Training XGBoost model...")
    detector.train(data, labels)
    
    model_path = "xgboost_model.pkl"
    detector.save_model(model_path)
    
    # Example of loading model
    new_detector = XGBoostDetector()
    new_detector.load_model(model_path)
