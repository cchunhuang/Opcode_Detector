import os
import joblib as jb
import numpy as np
from typing import Any

from malwareDetector.detector import detector

from SVM import SVM
from XGBoost import XGBoost
from Vectorize import Vectorize
from Extraction import Extraction

class MalwareDetector(detector):
    def __init__(self):
        """
        Initializes the MalwareDetector class with the specified model.

        Parameters:
        model_type (str): Type of model to use ('SVM' or 'XGBoost').
        model_path (str): Path to load the pre-trained model (optional).
        kwargs: Additional parameters for model initialization.
        """
        super().__init__()
        
        if self.config.model_type == 'SVM':
            self.model = SVM(self.config.kernal_type, self.config.probability, self.config.test_size, self.config.random_state, self.config.top_features_path)
        elif self.config.model_type == 'XGBoost':
            self.model = XGBoost(self.config.n_estimators, self.config.max_depth, self.config.eta, self.config.test_size, self.config.random_state, self.config.eval_metric, self.config.top_features_path)
        else:
            raise ValueError("Invalid model type. Choose 'SVM' or 'XGBoost'.")
        
        if self.config.model_path:
            self.load_model(self.config.model_path)
    
    def extractFeature(self) -> Any:
        """
        Extract features from malware dataset and return as a list.
        """
        return self.model.extractFeature()
    
    def vectorize(self) -> np.array:
        """
        Vectorize the extracted features into a numpy array.
        """
        return self.model.vectorize()
    
    def model(self, training: bool = True) -> Any:
        """
        Train the model if training=True, otherwise use a pre-trained model.
        """
        return self.model.model(training)
    
    def predict(self) -> np.array:
        """
        Predict using the trained model.
        """
        return self.model.predict()
    
    def save_model(self, output_model_path):
        """
        Saves the trained model to a file.
        """
        self.model.save_model(output_model_path)
    
    def load_model(self, input_model_path):
        """
        Loads a pre-trained model from a file.
        """
        self.model.load_model(input_model_path)
    
    def mkdir(self) -> None:
        """
        Create directories as specified in the config file.
        """
        super().mkdir()

if __name__ == "__main__":
    platform_info()
